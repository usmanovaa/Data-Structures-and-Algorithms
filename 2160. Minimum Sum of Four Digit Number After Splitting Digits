# 2160. Minimum Sum of Four Digit Number After Splitting Digits

# You are given a positive integer num consisting of exactly four digits. 
# Split num into two new integers new1 and new2 by using the digits found in num. 
# Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.
# For example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. 
# Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].
# Return the minimum possible sum of new1 and new2.



# INITIAL VERSION, O(n+ n*n + n), used Optimized Bubble Sorting
# Runtime 19 ms Beats 55.25% Memory 13.4 MB Beats 66.98%

class Solution(object):
    def minimumSum(self, num):
        """
        :type num: int
        :rtype: int
        """

        num_list = []

        while num > 0:

            num_list.append(num % 10)
            num = num // 10


        # optimized bubble sorting

        for i in range(len(num_list)):
            swapped = False

            for j in range(len(num_list) - i - 1):

                if num_list[j] > num_list[j+1]:

                    tmp = num_list[j]
                    num_list[j] = num_list[j+1]
                    num_list[j+1] = tmp

                    swapped = True
                

            if swapped == False:
                break

        print(num_list)

        while 0 in num_list:
            num_list.remove(0)

        n = len(num_list)
        if n == 1:
            return num_list[0]
        elif n == 2:
            return num_list[0] + num_list[1]
        elif n == 3:
            return num_list[0]*10 + num_list[1] + num_list[2]
        else:
            return (num_list[0] + num_list[1]) *10  + num_list[2] + num_list[3]



# MORE ELEGANT

... the same with sorting
return (num_list[0] + num_list[1])* 10 + num_list[2] + num_list[3]


