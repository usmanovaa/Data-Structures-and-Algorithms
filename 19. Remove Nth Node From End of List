19. Remove Nth Node From End of List

# Given the head of a linked list, remove the nth node from the end of the list and return its head.

# Linked list, 2 pointers
# https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/?envType=study-plan&id=algorithm-i


# INITIAL version
# O(2n)

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """

        temp = head
        k = 0

        while temp :
            temp = temp.next
            k+=1

        res = head

        if n == k:
            return head.next

        for i in range(1, k-n):
            res = res.next

        res.next = res.next.next

        return head
        
        
# MORE ELEGANT VERSION, O(n)

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """

        fast = head

        for i in range(n):
            fast = fast.next
    
        if not fast: return head.next

        slow = head
        while fast.next:
            fast = fast.next
            slow = slow.next

        slow.next = slow.next.next

        return head
