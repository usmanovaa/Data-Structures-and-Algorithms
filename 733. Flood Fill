# 733. Flood Fill

# Array, Depth-First Search

# https://leetcode.com/problems/flood-fill/description/?envType=study-plan&id=algorithm-i

# An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.
#You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].
#To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. 
#Replace the color of all of the aforementioned pixels with color.
#Return the modified image after performing the flood fill.

# Time Complexity - O(len(image) + len(image)[0])

# INITIAL VERSION

def coloring(image, i, j, color, visited):

        if visited == None:
            visited = set()

        visited.add((i,j))

        if i-1 >=0 and image[i-1][j] == image[i][j] and (i-1,j) not in visited:
            coloring(image, i-1, j, color, visited)
        if i+1 < len(image) and image[i+1][j] == image[i][j] and (i+1,j) not in visited:
            coloring(image, i+1, j, color, visited)
        if j-1 >= 0 and image[i][j-1] == image[i][j] and (i,j-1) not in visited:
            coloring(image, i, j-1, color, visited)
        if j+1 < len(image[0]) and image[i][j+1] == image[i][j] and (i,j+1) not in visited:
            coloring(image, i, j+1, color, visited)

        image[i][j] = color


class Solution(object):

    def floodFill(self, image, sr, sc, color):
        """
        :type image: List[List[int]]
        :type sr: int
        :type sc: int
        :type color: int
        :rtype: List[List[int]]
        """
        coloring(image, sr, sc, color, visited = None)

        return image
