# Easy: 1365. How Many Numbers Are Smaller Than the Current Number

# Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. 
# That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

# Input: nums = [8,1,2,2,3]
# Output: [4,0,1,1,3]

# INITIAL VERSION, based on Insertion Sort, O(n*n + n)
# Runtime 138 ms Beats 70.80% Memory 13.6 MB Beats 39.84%

import copy

class Solution(object):
    def smallerNumbersThanCurrent(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """

        sort = copy.deepcopy(nums)

        for i in range(1, len(sort)):
            key = sort[i]
            j = i - 1

            while j >= 0 and key < sort[j]:
                sort[j+1] = sort[j]
                j = j - 1
            
            sort[j+1] = key
        
        smaller = {}
        extra = 0

        for e in sort:
            if e not in smaller:
                smaller[e] = len(smaller) + extra
            else:
                extra += 1

        return [smaller[e] for e in nums]
        
        
 # MORE ELEGANT VERSION
